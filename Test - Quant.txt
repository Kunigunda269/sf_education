{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Тестовое задание включает несколько блоков. При выполнении каждой задачи желательно хотя бы кратко описывать ход рассуждений. Некоторые задачи могут оказаться сложными — не обязательно успевать всё, но важно постараться решить как можно больше.\n",
    "\n",
    "Обратите внимание: Блок 1 может оказаться наиболее времязатратным, так что планируйте своё время соответствующим образом.\n",
    "\n",
    "После каждой задачи требуется указать примерное время, потраченное на выполнение задания. В конце - суммарное\n",
    "\n",
    "Если в процессе у вас возникнут вопросы — не стесняйтесь задавать их."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Блок №1. Анализ данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В задании используется действительно ясная идея, но при этом ставятся очень непростые вопросы: где взять данные, какой алгоритм выбрать, как сравнивать разные подходы — всё как в реальных рабочих задачах. Это позволяет оценить комплексные и логические навыки кандидата, а также его умение проводить исследование."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.1 Проверить гипотезу о скоррелированности изменения дневных цен крупных крипто активов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.2 Разбейте активы на группы, внутри которых все активы демонстрируют высокую взаимную корреляцию изменений дневных цен."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.3 Построить предикт цены биткоина на день вперед и оценить его качество"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Блок №2. Теория вероятностей и статистика"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Матч двух команд состоит из раундов и проходит в формате best of 3 (до 2 побед в раундах).\\\n",
    "В каждом раунде возможна победа одной из команд, сила каждой команды в каждом раунде одинакова, раунды равнозначны между собой.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.1. Напишите функцию, которая, получая на вход вероятность победы первой команды в раунде, вернет вероятность победы первой команды во всём матче."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.2. Напишите функцию, которая, получая на вход вероятность победы первой команды в матче, вернет вероятность победы первой команды в раунде. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.3. Какой коэффициент должен предложить букмекер на победу первой команды в **раунде**, если вероятность победы первой команды в **матче** 60%?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Запишите коэффициент здесь\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.4. В театре 2 входа. Каждый из 1000 зрителей, который приходит на представление, равновероятно выбирает один из 2х входов. После выбора входа, зритель заходит внутрь и вешает свое пальто в гардероб конкретного входа. Если в гардеробе не оказывается мест, зритель расстраивается и идет вешать пальто к другому входу. Сколько мест нужно сделать в каждом из 2х гардеробов, чтобы с вероятностью 99 процентов не было расстроенных зрителей?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Блок № 3. Алгоритмы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дан массив чисел a : [a1, a2, a3, ...]. Напишите функцию, которая для каждого числа выводит ближайшего соседа справа, строго большее данного, или, если такого числа нет, выводит -1.\n",
    "\n",
    "Пример:\n",
    "\n",
    "a = [1, 10, 4, 3, 5] \n",
    "\n",
    "Для 1: 10\n",
    "\n",
    "Для 10: -1\n",
    "\n",
    "Для 4: 5\n",
    "\n",
    "Для 3: 5\n",
    "\n",
    "Для 5: -1\n",
    "\n",
    "Ответ: [10, -1, 5, 5, -1]\n",
    "\n",
    "Проанализируйте сложность своего решения, кратко обьясните почему нельзя сделать быстрее. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Блок № 4. Комбинаторика + алгоритмы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.1. Напишите функцию, которая принимает на вход строку и возвращает количество пар латинских букв 'q' и 'w' из этой строки, таких что буква 'q' стоит раньше буквы 'w'. Например,\n",
    "в слове 'qqww' таких пар четыре (так как любая буква 'q' сочетается с любой буквой 'w'),\n",
    "а в слове 'wwqq' таких пар нет (поскольку буквы 'q' стоят после букв 'w').  \n",
    "Функция должная работать не более 1 секунды для строк длиной до 200 000 символов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.2. Две команды, забивая голы в случайной последовательности, сыграли матч, закончившийся со счётом $\\ n : n$. Напишите функцию, которая по заданному $n$ находит вероятность того, что по ходу матча менялся лидер, то есть в одни моменты матча лидировала одна команда, а в другие -- другая. Например, для $n = 1$ такая вероятность равна нулю, а для $n = 2$ вероятность равна $1/3$.  \n",
    "Функция должная работать не более 1 секунды для всех $n < 500$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.3. Путешественник оказывается в пещере из которой выходят $(n + 1)$ туннелей. Один из туннелей длины $d_0$ выводит наружу, остальные туннели длин $d_1, \\ldots, d_n$ выводят обратно в ту же пещеру. Оказавшись в пещере, путешественник каждый раз выбирает туннель случайным образом с вероятностями $p_0, p_1, \\ldots, p_n$ соответственно. Напишите функцию, которая принимает на вход списки $D = [d_0, d_1, ..., d_n]$ и $P = [p_0, p_1, ..., p_n]$ и возвращает математическое ожидание пути, который пройдёт путешественник прежде, чем выйдет из пещеры наружу."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Место для вашего решения\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
